/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dakmainstitute.view.managetest;

import dakmainstitute.controller.*;
import dakmainstitute.model.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shashi
 */
public class viewTestMarks extends JFrame {

    /**
     * Creates new form viewTestMarks
     */
    ArrayList<Object[]> studentList;
    DefaultTableModel dtm;

    public viewTestMarks() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        try {
            fillSubjectCombo();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
        }

        final JTextField tf = (JTextField) testIdCombo.getEditor().getEditorComponent();
        tf.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                if (evt.getKeyCode() == 10) {
                    for (int i = 0; i < testIdCombo.getItemCount(); i++) {
                        Test t = (Test) testIdCombo.getItemAt(i);
                        if (t.getTestId().equals(tf.getText())) {
                            testIdCombo.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
        });
        
        studentList = new ArrayList<>();

        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            Object[] row = {testMarksTable.getValueAt(i, 0), testMarksTable.getValueAt(i, 1), testMarksTable.getValueAt(i, 2), testMarksTable.getValueAt(i, 3), testMarksTable.getValueAt(i, 4)};
            studentList.add(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        textIdLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        durationLabelText = new javax.swing.JLabel();
        dateLabelText = new javax.swing.JLabel();
        testIdCombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        testMarksTable = new javax.swing.JTable();
        classLabel = new javax.swing.JLabel();
        testTypeLabel2 = new javax.swing.JLabel();
        testTypeLabel1 = new javax.swing.JLabel();
        testTypeCombo = new javax.swing.JComboBox();
        classText = new javax.swing.JTextField();
        subjectCombo = new javax.swing.JComboBox();
        avgLabel = new javax.swing.JLabel();
        avgText = new javax.swing.JLabel();
        avgLabel1 = new javax.swing.JLabel();
        avgLabel2 = new javax.swing.JLabel();
        girlsText = new javax.swing.JLabel();
        boysText = new javax.swing.JLabel();
        viewChartButton = new javax.swing.JButton();
        testTypeLabel3 = new javax.swing.JLabel();
        districtCombo = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        nameSearchField = new org.jdesktop.swingx.JXSearchField();
        schoolSearchField = new org.jdesktop.swingx.JXSearchField();
        schoolLabel = new javax.swing.JLabel();
        indexNoLabel = new javax.swing.JLabel();
        indexNoSearchField = new org.jdesktop.swingx.JXSearchField();
        nameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        titleLabel.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        titleLabel.setIcon(new javax.swing.ImageIcon("F:\\NetBeans Project\\icon\\businessman_badpointing_md_wht.gif")); // NOI18N
        titleLabel.setText("Test Marks");

        textIdLabel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        textIdLabel.setText("Test Id    :");

        durationLabel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        durationLabel.setText("Duration :");

        dateLabel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        dateLabel.setText("Date       :");

        durationLabelText.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        dateLabelText.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        testIdCombo.setEditable(true);
        testIdCombo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        testIdCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                testIdComboItemStateChanged(evt);
            }
        });
        testIdCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testIdComboActionPerformed(evt);
            }
        });
        testIdCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                testIdComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                testIdComboKeyReleased(evt);
            }
        });

        testMarksTable.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        testMarksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index No", "Student Name", "School", "Marks", "Rank"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        testMarksTable.setToolTipText("Dakma Higher Education Center");
        testMarksTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        testMarksTable.setGridColor(new java.awt.Color(226, 252, 252));
        testMarksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testMarksTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(testMarksTable);

        classLabel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        classLabel.setText("Class       :");

        testTypeLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        testTypeLabel2.setText("Subject  :");

        testTypeLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        testTypeLabel1.setText("Test Type:");

        testTypeCombo.setBackground(new java.awt.Color(153, 204, 255));
        testTypeCombo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        testTypeCombo.setForeground(new java.awt.Color(51, 70, 14));
        testTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Revision", "Theory" }));
        testTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testTypeComboActionPerformed(evt);
            }
        });
        testTypeCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                testTypeComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                testTypeComboKeyReleased(evt);
            }
        });

        classText.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        classText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classTextActionPerformed(evt);
            }
        });
        classText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                classTextKeyPressed(evt);
            }
        });

        subjectCombo.setBackground(new java.awt.Color(153, 204, 255));
        subjectCombo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        subjectCombo.setForeground(new java.awt.Color(51, 70, 14));
        subjectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboActionPerformed(evt);
            }
        });
        subjectCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                subjectComboKeyPressed(evt);
            }
        });

        avgLabel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        avgLabel.setText("Girl's Avg  :");

        avgText.setBackground(new java.awt.Color(255, 102, 153));
        avgText.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        avgLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        avgLabel1.setText("Boy's Avg  :");

        avgLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        avgLabel2.setText("Total Avg  :");

        girlsText.setBackground(new java.awt.Color(255, 102, 153));
        girlsText.setFont(new java.awt.Font("Verdana", 0, 20)); // NOI18N
        girlsText.setForeground(new java.awt.Color(51, 0, 51));

        boysText.setBackground(new java.awt.Color(255, 102, 153));
        boysText.setFont(new java.awt.Font("Verdana", 0, 20)); // NOI18N
        boysText.setForeground(new java.awt.Color(51, 0, 51));

        viewChartButton.setText("View Chart");
        viewChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewChartButtonActionPerformed(evt);
            }
        });

        testTypeLabel3.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        testTypeLabel3.setText("District :");

        districtCombo.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        districtCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Matara", "Galle", "Thangalla" }));
        districtCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                districtComboActionPerformed(evt);
            }
        });
        districtCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                districtComboKeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("Send SMS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(0));

        nameSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSearchFieldActionPerformed(evt);
            }
        });
        nameSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameSearchFieldKeyReleased(evt);
            }
        });

        schoolSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schoolSearchFieldActionPerformed(evt);
            }
        });
        schoolSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                schoolSearchFieldKeyReleased(evt);
            }
        });

        schoolLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        schoolLabel.setText("School :");

        indexNoLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        indexNoLabel.setText("Index No   :");

        indexNoSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexNoSearchFieldActionPerformed(evt);
            }
        });
        indexNoSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                indexNoSearchFieldKeyReleased(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        nameLabel.setText("Name  :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexNoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexNoSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(schoolLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(schoolSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexNoLabel)
                    .addComponent(nameLabel)
                    .addComponent(schoolLabel)
                    .addComponent(schoolSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indexNoSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 994, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classLabel)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(dateLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(durationLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(testIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(classText, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(testTypeLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(testTypeLabel1)))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(avgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(girlsText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(7, 7, 7))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(avgLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(avgText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(995, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(avgLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(boysText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(testTypeLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(districtCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classLabel)
                    .addComponent(testTypeLabel2)
                    .addComponent(classText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testTypeLabel1)
                    .addComponent(testTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testTypeLabel3)
                    .addComponent(districtCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textIdLabel)
                                .addComponent(testIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(viewChartButton))
                            .addComponent(avgLabel1)
                            .addComponent(boysText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabelText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(girlsText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(avgLabel))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(avgLabel2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                        .addComponent(avgText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(durationLabel)
                        .addComponent(dateLabel))
                    .addComponent(durationLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 188, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testIdComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testIdComboActionPerformed
        ArrayList<Test> test = null;
        try {
            test = TestController.getDuration(testIdCombo.getSelectedItem() + "");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
        }
        dateLabelText.setText(test.get(0).getDate());
        durationLabelText.setText(test.get(0).getDuration());
    }//GEN-LAST:event_testIdComboActionPerformed

    private void testIdComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_testIdComboItemStateChanged
        ArrayList<Test> test = null;
        try {
            test = TestController.getDuration(testIdCombo.getSelectedItem() + "");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
        }
        dateLabelText.setText(test.get(0).getDate());
        durationLabelText.setText(test.get(0).getDuration());

        try {

            dtm = (DefaultTableModel) testMarksTable.getModel();
            ArrayList<TestMarks> testMarksList = TestMarksController.viewStudentMarks(testIdCombo.getSelectedItem() + "", districtCombo.getSelectedItem() + "");

            dtm.setRowCount(0);
            for (TestMarks testMarks : testMarksList) {
                String indx = testMarks.getIndexNo();
                String distric = districtCombo.getSelectedItem() + "";
                try {
                    Object rows[] = {testMarks.getIndexNo(), testMarks.getStudent().getStudentName(), testMarks.getStudent().getSchools().getSchoolName(), testMarks.getMarks()};
                    dtm.addRow(rows);
                } catch (Exception e) {
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
        }

        double total = 0;
        double boysTotal = 0;
        double girlsTotal = 0;
        List<Double> list = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            total += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
            list.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
        }
        String avg = total / testMarksTable.getRowCount() + "";
        avgText.setText(avg);

        int girlsCount = 0;
        int boysCount = 0;
        List<Double> boysList = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            String index = testMarksTable.getValueAt(i, 0) + "";
            char ch = index.charAt(2);
            if (ch == 'B') {
                boysTotal += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
                boysList.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
                boysCount++;
            }
        }
        String boysAvg = boysTotal / boysCount + "";
        boysText.setText(boysAvg);

        List<Double> girlsList = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            String index = testMarksTable.getValueAt(i, 0) + "";
            char ch = index.charAt(2);
            if (ch == 'G') {
                girlsTotal += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
                girlsList.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
                girlsCount++;
            }
        }
        String girlsAvg = girlsTotal / girlsCount + "";
        girlsText.setText(girlsAvg);
        calculateRank();

    }//GEN-LAST:event_testIdComboItemStateChanged

    private void testIdComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testIdComboKeyReleased
    }//GEN-LAST:event_testIdComboKeyReleased

    private void testIdComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testIdComboKeyPressed
        if (evt.getKeyCode() == 10) {
            Test test = (Test) testIdCombo.getSelectedItem();
            dateLabelText.setText(test.getDate());
            durationLabelText.setText(test.getDuration());
        }

    }//GEN-LAST:event_testIdComboKeyPressed

    private void testTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testTypeComboActionPerformed
        districtCombo.requestFocus();
    }//GEN-LAST:event_testTypeComboActionPerformed

    private void testTypeComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testTypeComboKeyPressed
        if (evt.getKeyCode() == 10) {
            districtCombo.requestFocus();
        }
    }//GEN-LAST:event_testTypeComboKeyPressed

    private void testTypeComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_testTypeComboKeyReleased
    }//GEN-LAST:event_testTypeComboKeyReleased

    private void classTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classTextActionPerformed
    }//GEN-LAST:event_classTextActionPerformed

    private void subjectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboActionPerformed
    }//GEN-LAST:event_subjectComboActionPerformed

    private void subjectComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subjectComboKeyPressed
        if (evt.getKeyCode() == 10) {
            testTypeCombo.requestFocus();
        }
    }//GEN-LAST:event_subjectComboKeyPressed

    private void classTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classTextKeyPressed
        if (evt.getKeyCode() == 10) {
            String clz = classText.getText();
            classText.setText(clz + "A/L");
            subjectCombo.requestFocus();
        }
    }//GEN-LAST:event_classTextKeyPressed

    private void testMarksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testMarksTableMouseClicked
    }//GEN-LAST:event_testMarksTableMouseClicked

    private void viewChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewChartButtonActionPerformed
        double total = 0;
        double boysTotal = 0;
        double girlsTotal = 0;
        List<Double> list = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            total += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
            list.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
        }
        String avg = total / testMarksTable.getRowCount() + "";
        avgText.setText(avg);

        int girlsCount = 0;
        int boysCount = 0;
        List<Double> boysList = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            String index = testMarksTable.getValueAt(i, 0) + "";
            char ch = index.charAt(2);
            if (ch == 'B') {
                boysTotal += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
                boysList.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
                boysCount++;
            }
        }
        String boysAvg = boysTotal / boysCount + "";
        boysText.setText(boysAvg);

        List<Double> girlsList = new ArrayList<>();
        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            String index = testMarksTable.getValueAt(i, 0) + "";
            char ch = index.charAt(2);
            if (ch == 'G') {
                girlsTotal += Double.parseDouble(testMarksTable.getValueAt(i, 3).toString());
                girlsList.add(Double.parseDouble(testMarksTable.getValueAt(i, 3).toString()));
                girlsCount++;
            }
        }
        String girlsAvg = girlsTotal / girlsCount + "";
        girlsText.setText(girlsAvg);

        calculateRank();

//        ArrayList<String> gAvg=(ArrayList<String>)girlsText.getText();
//        ViewGirlsBoysAvgChart.viweGirlsAvgChart(girlsAvg);
    }//GEN-LAST:event_viewChartButtonActionPerformed

    private void districtComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_districtComboKeyPressed
        if (evt.getKeyCode() == 10) {
            testIdCombo.requestFocus();
            try {
                fillTestIdCombo();
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_districtComboKeyPressed

    private void districtComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_districtComboActionPerformed
        try {
            fillTestIdCombo();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
        }
        testIdCombo.requestFocus();
    }//GEN-LAST:event_districtComboActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        List<SMSSender> sMSSendersList = new ArrayList<>();


        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            String indexNo = testMarksTable.getModel().getValueAt(i, 0).toString();
            String marks = testMarksTable.getModel().getValueAt(i, 3).toString();
            int rank = Integer.parseInt(testMarksTable.getModel().getValueAt(i, 4) + "");
            String testId = testIdCombo.getSelectedItem().toString();
            try {
                String mobileNum = StudentController.getMobieNum(indexNo);
                SMSSender sender = new SMSSender(indexNo, testId, marks, rank, mobileNum, 0);
                sMSSendersList.add(sender);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(viewTestMarks.class.getName()).log(Level.SEVERE, null, ex);
            }


        }

        SMSSenderController.sendAuto("COM7", sMSSendersList);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void schoolSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schoolSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_schoolSearchFieldActionPerformed

    private void nameSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameSearchFieldActionPerformed

    private void indexNoSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexNoSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_indexNoSearchFieldActionPerformed

    private void indexNoSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_indexNoSearchFieldKeyReleased
        String txt = indexNoSearchField.getText();
        int caretPosition = indexNoSearchField.getCaretPosition();
        if (caretPosition == 1 || caretPosition == 2 || caretPosition == 3) {
            String st = txt.toUpperCase();
            indexNoSearchField.setText(st);
        }

        String index = indexNoSearchField.getText();
        dtm = (DefaultTableModel) testMarksTable.getModel();
        dtm.setRowCount(0);
        for (Object[] objects : studentList) {
            if (objects[0].toString().contains(index)) {
                dtm.addRow(objects);
            }
        }
    }//GEN-LAST:event_indexNoSearchFieldKeyReleased

    private void nameSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameSearchFieldKeyReleased
        String txt = nameSearchField.getText();
        int caretPosition = nameSearchField.getCaretPosition();
        if (caretPosition == 1 || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            String st = txt.toUpperCase();
            nameSearchField.setText(st);
        }

        String index = nameSearchField.getText();
        dtm = (DefaultTableModel) testMarksTable.getModel();
        dtm.setRowCount(0);
        for (Object[] objects : studentList) {
            if (objects[1].toString().contains(index)) {
                dtm.addRow(objects);
            }
        }
    }//GEN-LAST:event_nameSearchFieldKeyReleased

    private void schoolSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_schoolSearchFieldKeyReleased
        String index = schoolSearchField.getText();
        dtm = (DefaultTableModel) testMarksTable.getModel();
        dtm.setRowCount(0);
        for (Object[] objects : studentList) {
            if (objects[2].toString().contains(index)) {
                dtm.addRow(objects);
            }
        }
    }//GEN-LAST:event_schoolSearchFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewTestMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewTestMarks().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avgLabel;
    private javax.swing.JLabel avgLabel1;
    private javax.swing.JLabel avgLabel2;
    private javax.swing.JLabel avgText;
    private javax.swing.JLabel boysText;
    private javax.swing.JLabel classLabel;
    private javax.swing.JTextField classText;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabelText;
    private javax.swing.JComboBox districtCombo;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JLabel durationLabelText;
    private javax.swing.JLabel girlsText;
    private javax.swing.JLabel indexNoLabel;
    private org.jdesktop.swingx.JXSearchField indexNoSearchField;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLabel;
    private org.jdesktop.swingx.JXSearchField nameSearchField;
    private javax.swing.JLabel schoolLabel;
    private org.jdesktop.swingx.JXSearchField schoolSearchField;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JComboBox testIdCombo;
    private javax.swing.JTable testMarksTable;
    private javax.swing.JComboBox testTypeCombo;
    private javax.swing.JLabel testTypeLabel1;
    private javax.swing.JLabel testTypeLabel2;
    private javax.swing.JLabel testTypeLabel3;
    private javax.swing.JLabel textIdLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton viewChartButton;
    // End of variables declaration//GEN-END:variables

    private void fillTestIdCombo() throws SQLException, ClassNotFoundException {
        ArrayList<Test> testList = TestController.getTestId(classText.getText(), subjectCombo.getSelectedItem() + "", testTypeCombo.getSelectedItem() + "");
        testIdCombo.removeAllItems();
        for (Test test : testList) {

            testIdCombo.addItem(test);

        }
    }

    private void fillSubjectCombo() throws SQLException, ClassNotFoundException {
        ArrayList<Subject> subjectList = SubjectController.getAllSubject();
        //subjectList.removeAllItems();
        for (Subject subject : subjectList) {
            subjectCombo.addItem(subject);

        }
    }

    private void calculateRank() {
        ArrayList<TestMarks> testMarksList = new ArrayList<>();

        for (int i = 0; i < testMarksTable.getRowCount(); i++) {
            testMarksList.add(new TestMarks((String) testMarksTable.getValueAt(i, 0), (String) testMarksTable.getValueAt(i, 3)));
        }
        Collections.sort(testMarksList);

        for (int i = 1, j = testMarksList.size() - 1; j > -1; i++, j--) {
            if (j != testMarksList.size() - 1 && Integer.parseInt(testMarksList.get(j).getMarks()) == Integer.parseInt(testMarksList.get(j + 1).getMarks())) {
                testMarksList.get(j).setRank(testMarksList.get(j + 1).getRank());
            } else {
                testMarksList.get(j).setRank(i);
            }
        }
        for (int i = 0; i < testMarksList.size(); i++) {
            TestMarks testMarks = testMarksList.get(i);
            for (int j = 0; j < testMarksTable.getRowCount(); j++) {
                String index = (String) testMarksTable.getValueAt(j, 0);
                if (index.equals(testMarks.getIndexNo())) {
                    testMarksTable.setValueAt(testMarks.getRank(), j, 4);
                    break;
                }
            }

        }
    }
}
